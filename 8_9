#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<errno.h>
#include<malloc.h>

//int main()
//{
//	//开辟空间的函数
//	int* p = (int*)malloc(10 * sizeof(int));
//	if (p == NULL)
//	{
//		printf("%s\n", strerror(errno));
//	}
//	else{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			*(p + i) = i;
//		}
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i));
//		}
//	}
//	//使用完内存空间应该回收这块内存空间
//	free(p);
//	//把p指针与该空间断开联系
//	p = NULL;
//	return 0;
//}

//int main()
//{	//malloc(10 * sizeof(int)
//	int*p = (int*)calloc(10, sizeof(int));
//	
//	if (p == NULL)
//	{
//		printf("%s\n", strerror(errno));//判断函数出了什么问题
//	}
//	else{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i)=i);
//		}
//	}
//	//free函数是用来释放动态开辟的空间的
//	free(p);
//	p = NULL;
//	return 0;
//}

int main()
{
	//调整动态开辟空间的大小
	int* p = (int*)malloc(10 * sizeof(int));
	
	if (p == NULL)
	{
		printf("%s\n", strerror(errno));
	}
	else{
		int i = 0;
		for (i = 0; i < 5; i++)
		{
			 *(p + i)=i;
		}
	}
	//只是在使用malloc开辟二十个字节空间
	//假设这里，20个字节不能满足我们的使用
	//我们需要40个字节空间
	//realloc注意事项
	//1.如果p指向的空间后有足够的内存空间可以追加，则直接追加，后返回p
	//2.如果p指向的空间后没有足够的内存空间可以追加，则realloc函数会重新找一块
	//新的内存区域，开辟一块满足需求的空间，且把原来的数据拷贝过来，并且把原来的内存空间释放，
	//最后重新返回新开辟的内存空间的地址
	int* p2=realloc(p, 40);
	int i = 0;
	for (i = 5; i < 10; i++)
	{
		*(p2 + i) = i;
	}
	for (i = 0; i < 10; i++)
	{
		printf("%d ", *(p2 + i));
	}
	return 0;
}
