#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<assert.h>
//int main(){
//	int aa[2][5] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int *p1 = (int *)(&aa + 1);
//	int *p2 = (int *)(*(aa + 1));
//	printf("%d,%d\n", *(p1 - 1), *(p2 - 1));
//	return 0;
//}

//实现字符串的旋转
//左旋转1个字符ABCD-》BCDA
//void left_move(char* arr, int k)
//{
//	assert(arr != NULL);
//	int len = strlen(arr);
//	int i = 0;
//	for (i = 0; i < k; i++)
//	{
//		//左旋转3个字符
//		//1
//		char tmp = *arr;
//		//2
//		int j = 0;
//		for (j = 0; j < len-1 ; j++)
//		{
//			*(arr + j) = *(arr + j + 1);
//		}
//		//3
//		*(arr + len - 1) = tmp;
//	}
//}
//三部翻转法
//void reverse(char* left,char* right){
//	assert(left != NULL);
//	assert(right != NULL);
//	while (left<right)
//	{
//		char tmp = *left;
//		*left = *right; 
//		*right = tmp;
//		left++;
//		right--; 
//	}
//}
//void left_move(char* arr, int k)
//{
//	assert(arr != NULL);
//	int len = strlen(arr);
//	reverse(arr,arr+k-1);//逆序左边cba
//	reverse(arr+k,arr+len-1);//逆序右边fed
//	reverse(arr,arr+len-1);//逆序整体cbafed->defabc
//}
//int main()
//{
//	char arr[] = "abcdef";
//	left_move(arr, 3);
//	printf("%s\n", arr);
//	return 0;
//}

//int test(char* str1, char* str2)
//{
//	int len1 = strlen(str1);
//	int len2 = strlen(str2);
//	if (len1 != len2)
//		return 0;
//	//在str1中追加一个字符串
//	strncat(str2, str2,6);//字符增加从abcdef变成abcdefabcdef
//	//判断str2指向的字符串是否为str1的子字符串
//	char * ret =strstr(str1, str2);//判断str2是否为str1的内容，子函数
//	if (ret = NULL)
//	{
//		return 0;
//	}
//	else
//	{
//		return 1;
//	}
//}
//int main()
//{
//	char arr1[30] = "abcdef";
//	char arr2[] = "cdefab";
//	int ret = test(arr1, arr2);
//	if (ret == 1)
//	{
//		printf("yes\n");
//	}
//	else
//	{
//		printf("no\n");
//	}
//	return 0;
//}

//杨氏矩阵
//有一个数字矩阵，每行从左到右都是递增，每列都是从上到下都是递增
//查找k，并查找次数小于元素个数
//123
//234
//345
int find(int arr[3][3],int k,int *row,int *col)
{
	int x = 0;
	int y = *col - 1;
	while (x<=*row-1&&y>=0)
	{
		if (arr[x][y]>k)
		{
			y--;
		}
		else if (arr[x][y]<k)
		{
			x++;
		}
		else
		{
			*row = x;
			*col = y;
			//printf("下标是%d %d\n", x, y);
			return 1;
		}
	}
	//找不到
	return 0;
		
}
int main(){
	int arr[3][3] = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
	int k = 7;
	int x = 3;
	int y = 3;
	int ret = find(arr, k, &x, &y);
	if (ret == 1)
	{
		printf("找到了\n");
		printf("下标是%d %d\n", x, y);
	}
	else
	{
		printf("没找到\n");
	}
	return 0;
}
